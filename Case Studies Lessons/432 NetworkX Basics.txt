Networks are created and manipulated using the NetworkX module.
We first need to import the module into Python.
We just type import networkx as nx

  import networkx as nx

The standard way to import the NetworkX library is using the as nx command.
We can then create an instance of an undirected graph using
that Graph function.

  G = nx.Graph()

Notice here that in the word graph, the G is capitalized.
And now we have an empty graph called G.
We can now add nodes one at a time or several at a time.
We can also get a list of the current nodes.
Let's first add a node called node 1, add node.
And in this case, node 1 has been added to a graph.

  G.add_node(1)

We can also add multiple nodes at the same time.
In that case, we'll use add_nodes_from, and the input argument
has to be a list containing all of the nodes
that we would like to add to our graph.
In this case, let's add 2 and 3.

  G.add_nodes_from([2,3])

One important point to realize is that the node labels don't necessarily
have to be numbers.
For example, we can use strings.
So we could add a node called u, and we would also add a node called v.

  G.add_nodes_from(["u", "v"])

If we would like to know what are the nodes in our graph,
we can use the nodes method.
And here we can see that we have five nodes in our graph-- 1, 2, 3, u and v.
Similar functions exist also for adding edges.
Remember that edges are treated as pairs of nodes.
Let's first try adding just one edge.
G.add_edge takes in two arguments.
In this case, we're inserting an edge 1, 2.
So we just add the node labels as the input arguments.

  G.add_edge(1,2)

We can also add an edge u, v. We replace this with u,
and we replace this with v.

  G.add_edge("u", "v")

We can also add multiple edges at the same time.
Instead of using add_nodes_from, now we're using the add_edges_from method,
G.add_edges_from.
The input argument is going to be a list, which
consists of several tuples, each tuple corresponding to an edge.
Let's try adding four edges.
I'm first going to create four empty tuples.
In this case, let's add edges 1, 3, 1, 4, 1, 5, and 1, 6.
We can add an edge even if the underlying nodes don't already
exist as part of the graph.

  G.add_edges_from([(1,3), (1,4), (1,5), (1,6)])

In that case, Python adds those nodes in automatically.
Let's try adding an edge u, w.

  G.add_edge("u", "w")

If we'd like to see a list of all the edges, we can use the edges method,
and in this case, we have 1, 2, 3, 4, 5, 6, 7 edges in our graph.

  G.edges()

We can also remove nodes and edges from our graph.
Let's first try removing node number 2.
To accomplish that, we use to remove_node method.
If we look at G.nodes, we'll see that node 2 has been removed.

  G.remove_node(2)
  G.nodes()

We can also remove multiple nodes at the same time.
In that case, we'll be using the remove_nodes_from method.
The input argument or input object is again
the list, which consists of the nodes that we would like to remove.
In this case, let's remove nodes 4 and 5,
and we can again make sure that those nodes have been removed.

  G.remove_nodes_from([4,5])

Analogously to node removal, we can also remove edges from our graph.
To remove a single edge, we use a G.remove_edge method.
So let's try removing edge 1, 3.

  G.remove_edge(1,3)

We can get a list of the remaining edges,
and we see that that edge has been removed.
We can also remove multiple edges, again using the remove_edges_from function.
The object is again a list, and it consists of the edges
that we would like to remove, which are encoded as tuples.
In this case, let's remove the edge 1, 2 and the edge u,
v. Now we can see what remains, and we only
have two edges remaining in our graph.

  G.remove_edges_from([(1,2), ("u", "v")])

We can also find out the number of nodes and the number of edges in our graph.
Our graph is called G, so to get the number of nodes,
we use a number_of_nodes method, and to get the number of edges,
we use the corresponding number_of_edges method.

  G.number_of_nodes()
  G.number_of_edges()
